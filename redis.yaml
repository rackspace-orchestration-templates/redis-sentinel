heat_template_version: 2013-05-23

description: |
  This is a Heat template to deploy a redis cluster on Rackspace Cloud Servers
  along with a sentinel on each slave to automate promotion of a new master
  when the existing one fails.

parameter_groups:

- label: Server Settings
  parameters:
  - image_name
  - server_flavor

- label: Redis Settings
  parameters:
  - redis_version
  - redis_master_hostname
  - redis_slave_hostname
  - redis_port
  - sentinel_port

parameters:

  server_flavor:
    label: Server Size
    description: Rackspace Cloud Server flavor
    type: string
    default: 1 GB Performance
    constraints:
    - allowed_values:
      - 1 GB Performance
      - 2 GB Performance
      - 4 GB Performance
      - 8 GB Performance
      - 15 GB Performance
      - 30 GB Performance
      - 512MB Standard Instance
      - 1GB Standard Instance
      - 2GB Standard Instance
      - 4GB Standard Instance
      - 8GB Standard Instance
      - 15GB Standard Instance
      - 30GB Standard Instance
      description: |
        Must be a valid Rackspace Cloud Server flavor for the region you have
        selected to deploy into.

  image_name:
    label: Server Image
    description: Operating system to use for created servers
    type: string
    default: Ubuntu 12.04 LTS (Precise Pangolin)
    constraints:
    - allowed_values:
      - Ubuntu 12.04 LTS (Precise Pangolin)
      - Ubuntu 13.10 (Saucy Salamander)
      description: Must be a supported operating system.

  redis_version:
    label: Redis Version
    description: version of redis to install
    type: string
    default: 2.8.9

  redis_master_hostname:
    label: Master Redis Hostname
    description: Hostname for nominal redis master
    type: string
    default: redis

  redis_slave_hostname:
    label: Slave Redis Hostname
    description: Hostname for the slaves
    type: string
    default: redis

  ssh_keypair_name:
    label: SSH Keypair
    description: Nova keypair name for ssh access to the servers
    type: string
    default: redis

  slave_node_count:
    label: Number Of Slave Nodes
    description: Number of slave nodes to create
    type: number
    default: 2
    constraints:
      - length: { min: 1 }

  slave_server_hostname:
    label: Slave Hostname
    description: hostname for slave servers
    type: string
    default: redis-slave

  redis_port:
    label: Redis Port
    description: port for redis servers to listen on
    type: number
    default: 6379

  sentinel_port:
    label: Sentinels Port
    description: port for sentinels to listen on
    type: number
    default: 26379

resources:

  ssh_key:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: ssh_keypair_name }
      save_private_key: true

  redis_password:
    type: OS::Heat::RandomString
    properties:
      length: 32
      sequence: lettersdigits

  redis_master:
    type: Rackspace::Cloud::Server
    depends_on: ssh_key
    properties:
      name: { get_param: redis_master_hostname }
      flavor: { get_param: server_flavor }
      image: { get_param: image_name }
      key_name: { get_resource: ssh_key }

  redis_master_config:
    type: OS::Heat::ChefSolo
    depends_on: redis_master
    properties:
      username: root
      private_key: { get_attr: [ssh_key, private_key] }
      host: { get_attr: [redis_master, accessIPv4] }
      kitchen: https://github.com/rackspace-orchestration-templates/redis-sentinel.git
      node:
        run_list: [ "recipe[apt]",
                    "recipe[build-essential]",
                    "recipe[rax-redis::config_slave_sentinel]" ]
        redisio:
          default_settings:
            requirepass: { get_attr: [redis_password, value] }
          servers:
            - name: master
              port: { get_param: redis_port }
          sentinels:
            - sentinel_port: { get_param: sentinel_port }
              port:          { get_param: sentinel_port }
              name: 'cluster'
              master_ip:     { get_attr: [redis_master, accessIPv4] }
              master_port:   { get_param: redis_port }
              auth-pass:     { get_attr: [redis_password, value] }
              logfile: /var/log/sentinel.log
          version: { get_param: redis_version }

  redis_slave_nodes:
    type: "OS::Heat::ResourceGroup"
    depends_on: redis_master
    properties:
      count: { get_param: slave_node_count }
      resource_def:
        type: http://drop.duncancreek.net/redis_slave.yaml
        properties:
          server_flavor:    { get_param: server_flavor }
          image_name:       { get_param: image_name }
          server_hostname:  { get_param: redis_slave_hostname }
          ssh_keypair_name: { get_param: ssh_keypair_name }
          ssh_private_key:  { get_attr: [ssh_key, private_key] }
          redis_password:   { get_attr: [redis_password, value] }
          master_ip:        { get_attr: [redis_master, accessIPv4] }
          redis_port:       { get_param: redis_port }
          sentinel_port:    { get_param: sentinel_port }
          redis_version:    { get_param: redis_version }


outputs:
  private_key:
    value: { get_attr: [ssh_key, private_key] }
  redis_password:
    value: { get_attr: [redis_password, value] }
  redis_master_ip:
    value: { get_attr: [redis_master, accessIPv4]}
  redis_slave_ips:
    value: { get_attr: [redis_slave_nodes, redis_slave_ip] }
  redis_port:
    value: { get_param: redis_port }
  sentinel_port:
    value: { get_param: sentinel_port }
